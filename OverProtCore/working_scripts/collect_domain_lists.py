'''
This Python3 script does foo ...

Example usage:
    python3  foo.py  --foo 4  foo.txt 
'''
# TODO add description and example usage in docstring

import argparse
import json
from pathlib import Path
from typing import Dict, Any, Optional

#  CONSTANTS  ################################################################################

FAMILY_LIST_FILE = 'family.json'
FAMILY_ORIG_LIST_FILE = 'family-orig.json'

#  FUNCTIONS  ################################################################################


#  MAIN  #####################################################################################

def parse_args() -> Dict[str, Any]:
    '''Parse command line arguments.'''
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('datadir', help='Directory generated by overprot_multifamily.py', type=Path)
    parser.add_argument('output', help=f'Output file', type=Path)
    parser.add_argument('--orig', help=f'Take family-orig.json instead of family.json', action='store_true')
    args = parser.parse_args()
    return vars(args)


def main(datadir: Path, output: Path, orig: bool = False) -> Optional[int]:
    '''Foo'''
    # TODO add docstring
    family_dirs = sorted((datadir/'families').iterdir())
    print(len(family_dirs), 'families')
    total_domain_list = []
    for family_dir in family_dirs:
        family = family_dir.name
        family_list_file = FAMILY_ORIG_LIST_FILE if orig else FAMILY_LIST_FILE
        text = (family_dir/family_list_file).read_text()
        try:
            js = json.loads(text)
        except json.JSONDecodeError:
            if len(text) == 0:
                js = {}
            else:
                print(f'Cannot parse {family_dir/family_list_file}')
                # raise
        family_domain_list = []
        for pdb, doms in js.items():
            for dom in doms:
                domain_name = dom['domain']
                pdb = dom['pdb']
                chain_id = dom['chain_id']
                ranges = dom['ranges']
                family_domain_list.append((family, domain_name, pdb, chain_id, ranges))
        # family_domain_list = sorted(dom['domain'] for pdb, doms in js.items() for dom in doms)
        total_domain_list.extend(family_domain_list)
        # for domain in family_domain_list:
        #     total_domain_list.append((family, domain))
    with open(output, 'w') as w:
        for domain_tuple in total_domain_list:
            print(*domain_tuple, sep='\t', file=w)


if __name__ == '__main__':
    args = parse_args()
    exit_code = main(**args)
    if exit_code is not None:
        exit(exit_code)